
#define HL_EXAS class=curpage

#include "<<HEAD>>"
#include "<<START>>"


<H1><<TITLE_CURRENT>></H1>

The example is used to present a variety modelling techniques. A short
way of making the model is given at the end.

<H3>1. Make a cube</H3>

This can be done with <I>unipoly</I>, which can be used to make all
the uniform polyhedra.
<PRE>
   unipoly cube &gt; cube.off
</PRE>

<IMG SRC="cub_oct01.gif" ALT="" HEIGHT=120 WIDTH=160 ALIGN=RIGHT>
Display with
<PRE>
   off2pov -o cube.pov cube.off
   povray +a +p cube.pov
</PRE>

<H3>2. Make the dual octahedron</H3>

<I>pol_recip</I> is used for making duals by polar reciprocation.
<P>
To make a nice compound the radius of the sphere used for reciprocation needs
to be the distance from the cube centre to the mid-point of an edge, and
the sphere centre must be the centre of the cube.
<P>
<IMG SRC="cub_oct02a.gif" ALT="" HEIGHT=120 WIDTH=160 ALIGN=RIGHT>
<I>unipoly</I> has centred the cube on (0, 0, 0), but <I>pol_recip</I>
will find this appropriate reciprocation centre by default.
The radius can be specified using the
<I>-r</I> option and passing two adjacent vertex index numbers of the cube.
Again, <I>pol_recip</I> will find the appropriate radius by default,
but for this example the radius will be specified in the command.
<P>
You can use <I>off2pov</I> with the <I>-n</I> option to display the cube
with its vertex numbers.
<PRE>
   off2pov -x f -n -o cube.pov cube.off
   povray +a +p cube.pov
</PRE>
<P>
If you have <I>antiview</I> available then that is the easier option
<PRE>
   antiview -x f -n v cube.off
</PRE>
Vertices 3 and 5 are adjacent, so make the dual octahedron like this, and
display it.
<IMG SRC="cub_oct02b.gif" ALT="" HEIGHT=120 WIDTH=160 ALIGN=RIGHT>
<PRE>
   pol_recip -r 3,5 cube.off &gt; oct.off
   off2pov -o oct.pov oct.off
   povray +a +p oct.pov
</PRE>

<H3>3. Merge the polyhedra</H3>

OFF files are merged with <I>off_util</I>
<IMG SRC="cub_oct03.gif" ALT="" HEIGHT=120 WIDTH=160 ALIGN=RIGHT>
<PRE>
   off_util cube.off oct.off &gt; cub_oct.off
</PRE>
Display the result.
<PRE>
   off2pov -o cub_oct.pov cub_oct.off
   povray +a +p cub_oct.pov
</PRE>

<H3>4. Use colours</H3>

To make it clearer that this is a compound of a cube and octahedron
the two polyhedra could be given different colours using <I>off_color</I>.
<P>
<IMG SRC="cub_oct04.gif" ALT="" HEIGHT=120 WIDTH=160 ALIGN=RIGHT>
Colour the cube faces red, and the octahedron faces green. The
colours can be given as values, or by their colour names.
<PRE>
   off_color -f 1.0,0.0,0.0 cube.off &gt; red_cube.off
   off_color -f green oct.off &gt; green_oct.off
</PRE>

Now merge and display as before, this time making the edge and
vertex elements smaller than the defaults

<PRE>
   off_util red_cube.off green_oct.off &gt; color_cub_oct.off
   off2pov -v 0.02 -e 0.016 -o color_cub_oct.pov color_cub_oct.off
   povray +a +p color_cub_oct.pov
</PRE>

<H3>5. A shorter way to make the model</H3>

The cube is included as a
<A HREF="<<PATH_UP>>programs/resources.html#models">resource model</A>
called <I>cube</I>. The <I>pol_recip</I> defaults are just right for this
model. <I>off2pov</I> accepts multiple off files so there is no need to
merge them.
<P>
The model and ray-traced image can be made with

<PRE>
   off_color -f red cube > cube_red.off
   pol_recip cube | off_color -f green > oct_green.off
   off2pov -v 0.02 -R 20,10,0 -o color_cub_oct.pov cube_red.off oct_green.off
   povray +a +p color_cub_oct.pov
</PRE>

#include "<<END>>"
