#define HL_PROG class=curpage

#include "<<HEAD>>"
#include "<<START>>"


<<TITLE_HEAD>>

<<TOP_LINKS>>

<<USAGE_START>>
<pre class="prog_help">
<<__SYSTEM__(../src/<<BASENAME>> -h > tmp.txt)>>
#entities ON
#include "tmp.txt"
#entities OFF
</pre>
<<USAGE_END>>


<<EXAMPLES_START>>
Make a cuboctahedron with the triangle faces a different colour to
the square faces
<<CMDS_START>>
off_color -f N cuboctahedron | antiview
<<CMDS_END>>

Same again, but make the colours black and white. Create a file called
my_colormap.txt with these two lines, which convert colour index numbers
into colour values. With <i>-f N</i>, faces are assigned a colour index
number the same as the number of sides, and this is then mapped to a
colour value by the active colour map.
<pre>
   3 = 0.0 0.0 0.0
   4 = 1.0 1.0 1.0
</pre>
Now the command is
<<CMDS_START>>
off_color -f N -m my_colormap.txt cuboctahedron | antiview
<<CMDS_END>>

Even easier, create the colour map on the command line, with component
values or names
<<CMDS_START>>
off_color -f N -m map_3=0.0/0.0/0.0:4=1.0/1.0/1.0 cuboctahedron | antiview
off_color -f N -m map_3=black:4=white cuboctahedron | antiview
<<CMDS_END>>

Colour faces with unique colours
<<CMDS_START>>
off_color -f U geo_2 | antiview -x ve
<<CMDS_END>>

Make dark colours for U by decreasing the value of the default map
<<CMDS_START>>
off_color -f U -r V0.4 geo_2 | antiview -x ve
<<CMDS_END>>

Rather than changing a map with -r an map with the desired colours
could be chosen e.g. a map with blue-green range and a pastel range
<<CMDS_START>>
off_color -f U -m rnd_H0.4:0.7 geo_2 | antiview -x ve
off_color -f U -m rand_S0.3 geo_2 | antiview -x ve
<<CMDS_END>>

Colour different elements with different maps
<<CMDS_START>>
off_color -f U -m f,rnd_H0.4:0.7 -e U -m e,rnd_H0.9:1.2 geo_2 | antiview -v 0.05
<<CMDS_END>>

Colour edges and vertices with a rainbow effect
<<CMDS_START>>
off_color -f 1.0,1.0,1.0 -e L -v L geo_5 | antiview -v 0.05
<<CMDS_END>>

Make a lights file placing a red, green, blue and white light
tetrahedrally, call it lts.off
<pre>
OFF
4 4 0
1 1 1
1 -1 -1
-1 -1 1
-1 1 -1
1 0 255 0 0
1 1 0 255 0
1 2 0 0 255
1 3 255 255 255
</pre>

Colour faces with a lighting effect using these lights
<<CMDS_START>>
off_color -l lts.off -f L geo_5 | antiview -x ve
<<CMDS_END>>
<<EXAMPLES_END>>


<<NOTES_START>>
A selection of
<a href="resources.html#lights">lights files</a>
and
<a href="resources.html#cmaps">colour map files</a>
are included with the Antiprism resources.
More colour maps are available from
<a href="http://www.iosart.com/firefox/colorzilla/palettes.html">
Colorzilla Palettes</a>.
<p>
Proper colourings are not always optimal.
<p>
Face colourings G and L which use normals are affected by the
orientation of the faces. If the colouring is patchy then
orient the faces with <i>off_util -O pos</i>
<p>
See also <a href="off_color_radial.html">off_color_radial</a> for a symmetric
colouring method.
<<NOTES_END>>

#include "<<END>>"
