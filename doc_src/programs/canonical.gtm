#define HL_PROG class=curpage

#include "<<HEAD>>"
#include "<<START>>"


<<TITLE_HEAD>>

<<TOP_LINKS>>

<<USAGE_START>>
<pre class="prog_help">
<<__SYSTEM__(../src/<<BASENAME>> -h > tmp.txt)>>
#entities ON
#include "tmp.txt"
#entities OFF
</pre>
<<USAGE_END>>


<<EXAMPLES_START>>
Make a cube, distort it, and canonicalize it back into a cube
<<CMDS_START>>
off_util cube | off_trans -S 1,2,3 | canonical | antiview
<<CMDS_END>>

Make a geodesic sphere, canonicalize it, and add it to it reciprocal
<<CMDS_START>>
geodesic -c 2 ico | canonical -O bd | antiview
<<CMDS_END>>
<<EXAMPLES_END>>


<<NOTES_START>>
The program will not always converge, and produce the canonical form.
In this cases it may help to distort the polyhedron before running
canonical. This could be done with <i>off_util -S</i>, <i>repel</i>,
<i>minmax</i>, <i>off_trans</i> or even editing the OFF file by hand.
<p>
George Hart has a page on
<a href="http://www.georgehart.com/virtual-polyhedra/canonical.html">
canonicalization</a>.
<p>
Uses algorithms by George W. Hart,
<a href="http://www.georgehart.com/">http://www.georgehart.com/</a>.
The 'Mathematica' algorithms have been written to follow George Hart's
<a href="http://library.wolfram.com/infocenter/Articles/2012/">
Mathematica implementation</a>
<<NOTES_END>>

#include "<<END>>"
