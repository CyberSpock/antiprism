#define HL_PROG class=curpage

#include "<<HEAD>>"
#include "<<START>>"


<<TITLE_HEAD>>

<<TOP_LINKS>>

<<USAGE_START>>
<pre class="prog_help">
<<__SYSTEM__(../src/<<BASENAME>> -h > tmp.txt)>>
#entities ON
#include "tmp.txt"
#entities OFF
</pre>
<<USAGE_END>>




<<EXAMPLES_START>>
Turn an icosahedron 3-fold axis into a six-fold axis, and make the
resulting faces regular
<<CMDS_START>>
off_trans -y D3v ico | to_nfold 6 | minmax -a u -s 20 -n 10000 | antiview
<<CMDS_END>>

Make a geometric representation of a polyhedron having only face data,
in this case a geodesic sphere has all its coordinates set to the origin
and is then laid out again on a sphere
<<CMDS_START>>
off_trans geo_3 -S 0 &gt; scrambled.off
minmax -p u -n 100000 scrambled.off &gt; unscrambled.off
<<CMDS_END>>

Run for a bit longer, don't need <i>-p u</i> this time
<<CMDS_START>>
minmax -n 100000 unscrambled.off &gt; unscrambled2.off
<<CMDS_END>>
<<EXAMPLES_END>>


<<NOTES_START>>
Doesn't always succeed. Experiment with option <i>-s</i>, <i>-l</i>,
<i>k</i> and <i>-f</i> to improve convergence, but setting them too
high may cause the model to scramble. Run the program for longer by
increasing option <i>-n</i>. The program shows the progress every
1000 iterations (change with option <i>-z</i>) by printing the
longest and shortest edge lengths (<i>-a v/a</i>) or the maximum
distance a vertex moved (<i>-a u</i>).
<<NOTES_END>>

#include "<<END>>"
