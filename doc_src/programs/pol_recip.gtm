#define HL_PROG class=curpage

#include "<<HEAD>>"
#include "<<START>>"


<<TITLE_HEAD>>

<<TOP_LINKS>>

<<USAGE_START>>
<pre class="prog_help">
<<__SYSTEM__(../src/<<BASENAME>> -h > tmp.txt)>>
#entities ON
#include "tmp.txt"
#entities OFF
</pre>
<<USAGE_END>>


<<EXAMPLES_START>>
Make the dual of an octahedron, a cube.
<<CMDS_START>>
pol_recip oct | antiview
<<CMDS_END>>

Make the dual pair of an octahedron and a cube.
<<CMDS_START>>
pol_recip -a oct | antiview
<<CMDS_END>>

Make the dual pair of a cuboctahedron and rhombic dodecahedron,
with the reciprocation radius touching the nearest faces (first
command) and farthest faces (second command) causing a dual vertex
to lie on faces at this distance
<<CMDS_START>>
pol_recip -r f cubo | antiview -x f cubo -
pol_recip -r F cubo | antiview -x f cubo -
<<CMDS_END>>

Specify a face plane of a polyhedron by three of its index numbers, make
a dual with a vertex that lies on this face plane, no matter where the
reciprocation centre is
<<CMDS_START>>
pol_recip -c 0,0,0.4  -r 2,3,5 pyr5 | antiview -x f pyr5 -
pol_recip -c 0,0,-0.4 -r 2,3,5 pyr5 | antiview -x f pyr5 -
<<CMDS_END>>

A canonical antihemaphrodite is self-dual, but not in the centroid
(first command). The correct centre can be found as a midsphere centre
(command 2) or an "edge-balanced" centre (command 3)
<<CMDS_START>>
polygon ant -s antih 4 | canonical | pol_recip -a | antiview
polygon ant -s antih 4 | canonical | pol_recip -c M -n 1000 -a | antiview
polygon ant -s antih 4 | canonical | pol_recip -c M -n 1000 -a | antiview
<<CMDS_END>>

When a polyhedron has a face plane passing through the reciprocation
centre, this is dualised into a an ideal vertex at infinity. To maintain
the visual symmetry of the dual, and emphasise that the vertex can be
reached in two opposite directions, the vertex is placed far away (control
distance with <i>-I</i>, and suppress this with <i>-x</i>). The first two
commands show the dual as the reciprocation centre is above and below
the base face of the triangular pyramid. Then on the plane (command 3),
and again, but with the duplicated vertices surpressed (command 4)

<<CMDS_START>>
pol_recip -c 0,0,0.05   -r 0,1 -a pyr3 | antiview -R -90,0,0
pol_recip -c 0,0,-0.05  -r 0,1 -a pyr3 | antiview -R -90,0,0
pol_recip -c 0,0,0.00   -r 0,1 -a pyr3 | antiview -R -90,0,0
pol_recip -c 0,0,0.00  -x -r 0,1 -a pyr3 | antiview -R -90,0,0
<<CMDS_END>>


<<EXAMPLES_END>>





<<NOTES_START>>
A dual of a convex polyhedron is normally made with the centre of
reciprocation at the polyhedron centre and the radius to just touch
the edges.
<p>
Some polyhedra have faces passing through their natural centre. This
causes a problem when making a dual because the vertex which is dual
to this face should be infinitely far away. <i>pol_recip</i> allows these
vertices to be included by placing them at a specified (probably very large)
distance normal to the face. Any programs dealing with these distant vertices
(e.g. povray) can interpret these distant vertices accordingly.
<p>
The default reciprocation centre and radius are found by the following
algorithm. It aims to find a reciprocation sphere that is <i>balanced</i>,
in the sense that the polyhedron and its dual have the same relationship
with the sphere.

<pre>
   centre = centroid of vertices of base polyhedron
   radius = average distance from centre to edges
   LOOP:
      dual = polar reciprocal of base, using centre and radius
      
      invert dual in centre point

      edge_centroid    = centroid of the nearest points to the centre
                         on the base's edges and duals edges
      radius_sum_base  = sum of distances from the centre to the nearest
                         point to the centre on the base's edges
      radius_sum_dual  = sum of distances from the centre to the nearest
                         point to the centre on the dual's edges

      if loop count is even:
         centre = 0.9*centre + 0.1*edge_centroid
      if loop count is odd:
         radius = radius * sqrt(rad_sum_g/rad_sum_d)

      finish loop if change in centre and radius are small enough

</pre>
<p>
The aim is that this will be a <i>similar reciprocation</i> method.
That is to say
<ul>
<li>It will be <i>reciprocal</i> - it will always reciprocate a polyhedron
    into the same polyhedron dual, and it will always reciprocate the dual
    into the original polyhedron
<li>It will <i>respect similarity</i> - similar polyhedra will have similar
    dual-pairs and similar duals
</ul>
<p>
The default method above tends to reciprocate in the midsphere, if
it exists.
<p>
The other available balanced reciprocation methods use the centroid
of combined face near-points and vertex offsets, or the centroid
of the near-points of all three elements combined. For all three
cases the dual may be inverted in the reciprocation centre before
the centroid calculation.
<p>
<i>-r e</i> may select a sphere suitable for self-duality.
<p>
<i>-r v</i> and <i>-r V</i> may always give the same results.
<<NOTES_END>>

#include "<<END>>"
