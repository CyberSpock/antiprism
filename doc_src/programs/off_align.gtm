#define HL_PROG class=curpage

#include "<<HEAD>>"
#include "<<START>>"


<<TITLE_HEAD>>

<<TOP_LINKS>>

<<USAGE_START>>
<pre class="prog_help">
<<__SYSTEM__(../src/<<BASENAME>> -h > tmp.txt)>>
#entities ON
#include "tmp.txt"
#entities OFF
</pre>
<<USAGE_END>>


<<EXAMPLES_START>>
Bond vertices 0,2,4 of an octahedron brick to vertices 0,1,2 of a
tetrahedron base, and output both parts in the order brick (octahedron)
followed by base (tetrahedron)
<<CMDS_START>>
   off_align -M brick_base -v oct,0,1,2,0,2,4 tet | antiview
<<CMDS_END>>

Augment face 1 of an icosahedron, making a polyhedron with 22 faces
<<CMDS_START>>
   off_align -F tet,1 icosa | antiview
<<CMDS_END>>
<<EXAMPLES_END>>


<<NOTES_START>>
This can be used to build larger structures using polyhedra
as bricks.
<p>
When using <i>-F</i> the specified faces are deleted from the
output. Faces in the base polyhderon that come after the bonding
face will have their index numbers decreased by one in the output.
<p>
When aligning models into a collection one at a time with repeated
calls of off_align, -M brick_base will preserve the brick index
numbers (useful for a helix), and -M base_brick will preserve
the base index numbers (useful to add new parts to the same base).
<p>
Parts aligned to have coincident faces (in pairs) can have these faces
removed later with <i>off_util -M b</i>.
<p>
Options <i>-f</i> and <i>-F</i> must take an option argument. If the
argument should be empty then give the argument as a comma <i>','</i>.
This will indicate that the brick geometry is empty (use the base geometry
for the brick) and all following parameters are defaults.

<<NOTES_END>>

#include "<<END>>"
