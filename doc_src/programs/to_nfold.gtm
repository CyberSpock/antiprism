#define HL_PROG class=curpage

#include "<<HEAD>>"
#include "<<START>>"

<<TITLE_HEAD>>

<<TOP_LINKS>>

<<USAGE_START>>
<pre class="prog_help">
<<__SYSTEM__(../src/<<BASENAME>> -h > tmp.txt)>>
#entities ON
#include "tmp.txt"
#entities OFF
</pre>
<<USAGE_END>>


<<EXAMPLES_START>>
Increase rotational symmetry, e.g. pentagonal prism to hexagonal prism
<<CMDS_START>>
   to_nfold 6 pri5 | antiview
<<CMDS_END>>

Decrease rotational symmetry, e.g. pentagonal prism to triangular prism
<<CMDS_START>>
   to_nfold 3 pri5 | antiview
<<CMDS_END>>

Change rotational symmetry with a fraction, the denominator introduces a
step, e.g. pentagonal prism to {7/2}-prism
<<CMDS_START>>
   to_nfold 7/2 pri5 | antiview
<<CMDS_END>>

Change the basic step of a model, e.g. pentagramic dipyramid to pentagonal
pyramid (2*3 = 1 mod(5))
<<CMDS_START>>
   to_nfold 5/3 dip5/2 | antiview
<<CMDS_END>>

Open an edge, taken as a digon, e.g. convert snub disphenoid to (non-Johnson)
snub square antiprism
<<CMDS_START>>
   to_nfold 4 j_snub_disphenoid | antiview
<<CMDS_END>>

Close a polygon down to a digon, e.g. convert snub square antiprism to
(non-Johnson) snub disphenoid
<<CMDS_START>>
   to_nfold 2 j_snub_square_antiprism | antiview
<<CMDS_END>>

Convert a polyhedral torus
<<CMDS_START>>
   unitile2d -s t | off_trans -R 90,0,0 | to_nfold 11/2 | antiview
<<CMDS_END>>

A 5/2 crossed-antiprism has oblique faces that cycle the axis, and the
result of regular processing does not produce a crossed-antiprism,
but the crossed-antiprism form can be preserved with option <i>-x</i>
<<CMDS_START>>
   antiview ant5/3
   to_nfold 7 ant5/3 | antiview
   to_nfold 7 ant5/3 -x 0 | antiview
<<CMDS_END>>

Uncross a crossed-antiprism (the fraction parameter is required,
but not used) 
<<CMDS_START>>
   antiview ant5/3
   to_nfold 2 ant5/3 -p 0,-1 | antiview
<<CMDS_END>>

Dimple a ring of vertices of a snub-antiprism (the fraction parameter is
required, but not used) 
<<CMDS_START>>
   antiview snu4
   to_nfold 2 snu4 -p 10,0.2 | antiview
<<CMDS_END>>

<<EXAMPLES_END>>


<<NOTES_START>>

<h3>Algorithm</h3>

<p>
First the cyclic symmetry of the model, <i>C<sub>n_from</sub></i>, is found.
An arbitrary sector of angular width <i>2&pi; / n_from</i> is considered, and
this sector is scaled by rotation to have angular width
<i>2&pi; &middot; d_to / n_to</i>.
This determines the new vertex positions unambiguously.
</p>
<p>
The faces are determined by considering each set of faces which are equivalent
under <i>C<sub>n_from</sub></i> symmetry, and then choosing a minimal chain
of edges that will repeat by this symmtry to recreate the edges of this
set of faces. The chain is transformed, edge by edge, to match the
final symmetry and step. It is then
repeated by the final symmetry into one or more circuits, which are
the final faces.
</p>
<p>
To transform each edge, the original central angle is considered
positive if the symmetry axis lies in the sweep of this edge and the last,
otherwise negative, but if the edge intersects the symmetry axis (180
degree edge) then its sign is ambiguous. In this case, if the sum of
angles with the adjoining edges is positive then the sign is taken as
negative, and vice versa. If the sum is zero, then the sign is chosen,
arbitrarily.
</p>

<h3>Issues</h3>
<ul>
<li>If a model has faces that meet at a 180 degree edge
    in the base model then they may not meet in the final model.</li>
<li>Some polygons may have a face that shares the axial symmetry but
    will not divide into valid edge chains, e.g. a rectangular bow-tie
    quadrilateral has 4 edges and 2-fold symmetry, but a chain of two
    of its edges cannot be repeated by 2-fold symmetry to recreate the
    original bow tie.</li>
<li>Some models have an axial fractional polygon, or a form that can
    be identified with one (e.g. a polyhedral tube might follow the
    path of pentagram edges). The step of a polygon tends to be
    preserved when applying <i>to_nfold</i>, and it may be that the
    apparent final model step will divide the final <i>n_to</i>. Such
    models are not constructible, and will lead to a broken final model,
    likely with edges from a vertex onto itself,
    e.g. <tt>to_nfold&nbsp;3&nbsp;pri7/3</tt>.
<li>Faces that slant and are intersected by the axis may lead to
    skew polygons that wrap the axis several times. This may not
    be the desired result, however, it is correct for the
    algorithm. e.g. <tt>to_nfold&nbsp;7&nbsp;ant5/3</tt>. It
    may be possib;e to correct this with option <i>-x</i>.
</ul>
<p>
<i>to_nfold</i> is based on an 
<a href="http://tech.groups.yahoo.com/group/antiprism/message/6997">idea by Bruce R. Gilson</a>.
</p>

#include "<<END>>"
