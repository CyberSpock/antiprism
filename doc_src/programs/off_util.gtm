#define HL_PROG class=curpage

#include "<<HEAD>>"
#include "<<START>>"


<<TITLE_HEAD>>

<<TOP_LINKS>>

<<USAGE_START>>
<pre class="prog_help">
<<__SYSTEM__(../src/<<BASENAME>> -h > tmp.txt)>>
#entities ON
#include "tmp.txt"
#entities OFF
</pre>
<<USAGE_END>>


<<EXAMPLES_START>>
combine two files/models into a single file
<<CMDS_START>>
off_util cube oct > cube_and_oct.off
<<CMDS_END>>

Combine two files/models into a single file, and merge all elements. The
first off_util command uses a default average for colouring blended elements,
and the second command simply uses the colour from the first of blended
elements.
<<CMDS_START>>
off_color -f red cube > red_cube.off
off_color -f yellow cube > yellow_cube.off
off_util -M a red_cube.off yellow_cube.off | antiview
off_util -M a,first red_cube.off yellow_cube.off | antiview
<<CMDS_END>>

Combine two files/models into a single file, and merge coincident vertices
only
<<CMDS_START>>
off_util -M v std_cube std_cube | antiview -n vf
<<CMDS_END>>

Add elements to a model
<<CMDS_START>>
off_util -A v0,0,1:blue -A f8,0,2:yellow -A e8,4,6:green cube | antiview
<<CMDS_END>>

Add elements to an empty geometry, to create a model from scratch
<<CMDS_START>>
off_util -A v0,0,1:blue null | poly_kscope -s O | conv_hull | antiview
<<CMDS_END>>


Delete elements from a model. The following commands: delete vertex 0,
delete face 1, delete faces 1 and 5, delete faces 1 to 3, delete faces
2 and less and 4 and more (leaving face 3), delete all faces ecept for
faces 0 and 1.
<<CMDS_START>>
off_util -D v0 cube | antiview
off_util -D f1 cube | antiview
off_util -D f1,5 cube | antiview
off_util -D f1-3 cube | antiview
off_util -D f-2,4- cube | antiview
off_util -D f0,1% cube | antiview
<<CMDS_END>>

Delete edge or face parts of a model. The following commands:
delete edge part 0, delete face part 0
<<CMDS_START>>
off_util -D E0 uc4 | antiview
off_util -D F0 uc4 | antiview
<<CMDS_END>>

Delete elements from a model which are connected to other elements. The
following commands: delete faces connected to vertex 0, face parts
to connected to vertex 1, vertices connected to face 3, vertices
connected to face part 0
<<CMDS_START>>
off_util -D fv0 cube | antiview
off_util -D Fv1 uc4 | antiview
off_util -D vf3 uc4 | antiview
off_util -D vF0 uc4 | antiview
<<CMDS_END>>

Use <i>-e</i> to convert implicit edges to explicit edges before a delete
to preserve the edges that have all their supporting faces deleted
<<CMDS_START>
off_util -e -D fv0 cube | antiview
pol_recip -a cube | off_util -e -D F0 | antiview
<<CMDS_END>

Keep elements from a model. <i>-K</i> is not exactly an opposite to
<i>-D</i>, as when it keeps elements it also keeps "decorators",
considered to be any coloured vertices or edges which lie on kept
elements. If it should keep implicit edges, these will be made explicit.
The following commands: keep face 0, keep the edges attached
to vertex 1, keep the faces attached to vertex 1, keep the edge part
attached to vertex 1, keep the face part attached to vertex 1, keep
the edges connected to face 1 of a cube (implicit edges converted to
explicit edges)
<<CMDS_START>>
off_util -K f0 uc4 | antiview
off_util -K ev1 uc4 | antiview
off_util -K fv1 uc4 | antiview
off_util -K Ev1 uc4 | antiview
off_util -K Fv1 uc4 | antiview
<<CMDS_END>>

Keep elements from a model, inverting selection. When using % with <i>-K</i>,
the elements that would have been kept are deleted instead. Decorators
are kept, except where they are specificed by the option parameter. The
following commands: invert keep of edge part 0 (the only thing deleted
is the edges of edge part 0, the vertex decorators are retained as they
are decorators for remaining faces), invert keep of face part 0 (face
part 0 is deleted along with its decorators.)
<<CMDS_START>>
off_util -K E0% uc4 | antiview
off_util -K F0% uc4 | antiview
<<CMDS_END>>



Orient the faces a model. The signed volume of the oriented model will be
positive.
<<CMDS_START>>
off_util -O p cube | off_report
<<CMDS_END>>
<<EXAMPLES_END>>

Triangulate a model, any new internal edges and vertices will be coloured
invisible
<<CMDS_START>>
off_util -t tri tr_cube | antiview -n f
off_util -t tri -g tr_cube | antiview -n f
<<CMDS_END>>

Reduce a model to an uncoloured mesh. Remove any edges or vertices not
on faces. Applying this to the previous triangulated model
<<CMDS_START>>
off_util -t tri -g tr_cube | antiview -n f
<<CMDS_END>>

Remove particular elements, e.g. remove edges from the previous skeleton model
<<CMDS_START>>
off_util -s ico -x e | antiview
<<CMDS_END>>

Make an edge skeleton by replacing faces with their surrounding edges
<<CMDS_START>>
off_util -s ico | antiview
<<CMDS_END>>

Close a polyhedron. The first command deletes a cube vertex and closes the
opening. The second deletes two non-coplanar adjacent faces and closes the
opening with a non-planar face. The third command shows that if a vertex
lies on more than one opening those openings cannot be closed.
<<CMDS_START>>
off_util -D v0 -c red cube | antiview
off_util -D f0,1 -c none cube | antiview -t no_tri
off_util -D f0,2 -c none oct | antiview -t no_tri
<<CMDS_END>>

Truncate all vertices, or all 4-way vertices, to 1/3 along the edges
<<CMDS_START>>
off_util -T 1/3 rd | antiview
off_util -T 1/3,4 rd | antiview
<<CMDS_END>>

Project a model onto a unit sphere, the resulting polyhedron may
have non-planar faces
<<CMDS_START>>
off_util -S rd | antiview
<<CMDS_END>>

Truncate the number of decimal places for coordinates in the output
<<CMDS_START>>
off_util -d 3 tet
<<CMDS_END>>

Make a net of a polyhedron (very basic)
<<CMDS_START>>
off_util -u 0,0,z ico | antiview
<<CMDS_END>>









<<NOTES_START>>

<h3>Deleting Elements</h3>

Delete and keep operations work in slightly different ways.
<p>
<b>Delete, <i>-D</i></b>
<ul>
<li>convert implicit edges to explicit</li>
<li>find face and edge parts</li>
<li>delete elements according to the index numbers displayed in <i>antiview</i></li>
<li>delete any explicit edges that were originally implicit</li>
</ul>

<p>
<b>Keep, <i>-K</i></b>
<ul>
<li>convert implicit edges to explicit</li>
<li>find face and edge parts</li>
<li>keep elements according to the index numbers displayed in <i>antiview</i></li>
<li>keep all supporting vertices and any decorators (coloured vertices lying
on an edge or coloured vertices and edges lying on a face)</li>
<li>delete all elements not kept</li>
</ul>

When elements are deleted, this affects other elements as follows:
<dl>
<dt>Vertex deleted:</dt>
<dd>Removes the vertex (index number) from any faces it is part of,
reducing the number of vertices in these faces and causing deletion
of any face with less than two vertices remaining. Deletes any edges
that the vertex is part of.
<dt>Edge deleted:</dt>
<dd>No effect on faces or vertices. May leave free vertices not lying
on any face or edge.</dd>
<dt>Face deleted:</dt>
<dd>No effect on vertices. May leave free vertices not lying on any face or
edge. No effect on explicit edges. Implicit edges no longer exist, in any sense,
when the last face they lie on is deleted.</dd>
<dt>Edge or face part deleted</dt>
<dd>An edge or face part is just a set of elements of the corresponding type.
Deleting the part deletes the elements in this set.</dd>
</dl>

<h3>Other Notes</h3>
Option <i>-E</i> is like the <i>join</i> operation in Conway Notation.
<p>
The face sorting performed by option <i>-M</i> orients faces in
a particular way. Option <i>-O</i> will generally reorient some
of the sorted faces, and this will always be true if the input
is a polyhedron.
<p>
The coordinates of a file can be tidied up by running <i>off_util -d</i>
twice, the first time with a negative number to truncate the coordinate
at a number of decimals, the second time with a positive number to
truncate the trailing zeros. For example, to tidy
<i>pol_recip&nbsp;cubo&nbsp;|&nbsp;off_trans&nbsp;-s&nbsp;r</i>
<<CMDS_START>>
pol_recip cubo | off_trans -s r | off_util -d -1 | off_util -d 1
<<CMDS_END>>
<<NOTES_END>>

#include "<<END>>"
